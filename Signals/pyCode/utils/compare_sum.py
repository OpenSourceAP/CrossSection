#!/usr/bin/env python3
"""
ABOUTME: Compare saved summary statistics between data vintages
ABOUTME: Identifies changes in data shape, columns, and statistical distributions

This script compares JSON summary statistics files generated by sum_dl.py and 
sum_pred.py to identify differences between data vintages without reloading 
the full datasets.

Arguments:
  vintage1       First vintage label (e.g., 'unlabelled', 'v1.0_baseline')
  vintage2       Second vintage label to compare against
  --type         Type of data: 'dl' (DataDownloads) or 'pred' (Predictors)
  --script       Script name (e.g., 'B_CompustatAnnual')
  --tolerance    Numeric tolerance for statistical comparisons (default: 1e-6)

Output:
  Comparison report showing differences between vintages

Usage examples:
  python3 utils/compare_sum.py unlabelled v1.0_baseline --type dl --script B_CompustatAnnual
  python3 utils/compare_vintages.py v1.0_baseline after_fix --type pred --script Beta
"""

import json
import argparse
from pathlib import Path
from datetime import datetime
import sys


def load_vintage(vintage_label, data_type, script_name):
    """Load a vintage JSON file."""
    # Construct directory path based on type and vintage
    prefix = 'sum_dl' if data_type == 'dl' else 'sum_pred'
    vintage_dir = Path(f"../Logs/{prefix}_{vintage_label}")
    json_file = vintage_dir / f"{script_name}.json"
    
    if not json_file.exists():
        print(f"Error: Vintage file not found: {json_file}")
        sys.exit(1)
    
    with open(json_file, 'r') as f:
        return json.load(f)


def compare_datasets(data1, data2, tolerance=1e-6):
    """Compare two dataset structures and statistics."""
    differences = {
        'structure_changes': [],
        'stat_changes': [],
        'new_columns': [],
        'removed_columns': [],
        'row_changes': []
    }
    
    # Create dataset lookup maps
    datasets1 = {d['dataset_name']: d for d in data1['datasets']}
    datasets2 = {d['dataset_name']: d for d in data2['datasets']}
    
    # Check for added/removed datasets
    datasets1_names = set(datasets1.keys())
    datasets2_names = set(datasets2.keys())
    
    new_datasets = datasets2_names - datasets1_names
    removed_datasets = datasets1_names - datasets2_names
    
    if new_datasets:
        differences['structure_changes'].append(f"New datasets: {', '.join(new_datasets)}")
    if removed_datasets:
        differences['structure_changes'].append(f"Removed datasets: {', '.join(removed_datasets)}")
    
    # Compare common datasets
    common_datasets = datasets1_names & datasets2_names
    
    for dataset_name in common_datasets:
        ds1 = datasets1[dataset_name]
        ds2 = datasets2[dataset_name]
        
        # Check row count changes
        if ds1['total_rows'] != ds2['total_rows']:
            row_diff = ds2['total_rows'] - ds1['total_rows']
            pct_change = (row_diff / ds1['total_rows']) * 100 if ds1['total_rows'] > 0 else 100
            differences['row_changes'].append({
                'dataset': dataset_name,
                'old_rows': ds1['total_rows'],
                'new_rows': ds2['total_rows'],
                'difference': row_diff,
                'pct_change': pct_change
            })
        
        # Check column changes
        cols1 = set(ds1['column_stats'].keys())
        cols2 = set(ds2['column_stats'].keys())
        
        new_cols = cols2 - cols1
        removed_cols = cols1 - cols2
        
        if new_cols:
            for col in new_cols:
                differences['new_columns'].append(f"{dataset_name}.{col}")
        
        if removed_cols:
            for col in removed_cols:
                differences['removed_columns'].append(f"{dataset_name}.{col}")
        
        # Compare statistics for common columns
        common_cols = cols1 & cols2
        for col in common_cols:
            stats1 = ds1['column_stats'][col]
            stats2 = ds2['column_stats'][col]
            
            # Compare numeric statistics
            for stat_key in ['mean', 'std', 'p25', 'p75']:
                if stat_key in stats1 and stat_key in stats2:
                    val1 = stats1[stat_key]
                    val2 = stats2[stat_key]
                    
                    if val1 is not None and val2 is not None:
                        # Check if values differ by more than tolerance
                        if abs(val1) > 1e-10:  # Avoid division by zero
                            rel_diff = abs((val2 - val1) / val1)
                            if rel_diff > tolerance:
                                differences['stat_changes'].append({
                                    'dataset': dataset_name,
                                    'column': col,
                                    'statistic': stat_key,
                                    'old_value': val1,
                                    'new_value': val2,
                                    'rel_diff': rel_diff
                                })
            
            # Check count changes
            count1 = stats1.get('count', 0)
            count2 = stats2.get('count', 0)
            if count1 != count2:
                differences['stat_changes'].append({
                    'dataset': dataset_name,
                    'column': col,
                    'statistic': 'count',
                    'old_value': count1,
                    'new_value': count2,
                    'rel_diff': abs(count2 - count1) / count1 if count1 > 0 else 1.0
                })
    
    return differences


def format_comparison_report(vintage1_data, vintage2_data, differences, vintage1_label, vintage2_label):
    """Format the comparison results as a readable report."""
    lines = []
    
    # Header
    lines.append("# Vintage Comparison Report")
    lines.append("")
    lines.append(f"**Vintage 1**: {vintage1_data['timestamp']}")
    lines.append(f"**Vintage 2**: {vintage2_data['timestamp']}")
    lines.append(f"**Script**: {vintage1_data['script_name']}")
    lines.append("")

    # Vintage statistics
    lines.append("## Vintage Statistics")
    lines.append("")

    # Use the provided vintage labels
    v1_label = vintage1_label
    v2_label = vintage2_label

    # Show detailed statistics for each column across datasets
    lines.append(f"| {'Statistic':<12} | {v1_label:>15} | {v2_label:>15} | {'Diff':>15} |")
    lines.append("|--------------|-----------------|-----------------|-----------------|")

    # Collect all columns from both vintages
    all_columns = set()
    datasets1 = {d['dataset_name']: d for d in vintage1_data['datasets']}
    datasets2 = {d['dataset_name']: d for d in vintage2_data['datasets']}

    for dataset in vintage1_data['datasets']:
        all_columns.update(dataset['column_stats'].keys())
    for dataset in vintage2_data['datasets']:
        all_columns.update(dataset['column_stats'].keys())

    # For each column, show detailed statistics
    for col_name in sorted(all_columns):
        # Skip identifier columns (permno, yyyymm) to focus on data columns
        if col_name.lower() in ['permno', 'yyyymm']:
            continue

        lines.append(f"**{col_name}**")

        # Find this column across all datasets in both vintages
        v1_stats = None
        v2_stats = None

        for dataset_name, dataset in datasets1.items():
            if col_name in dataset['column_stats']:
                v1_stats = dataset['column_stats'][col_name]
                break

        for dataset_name, dataset in datasets2.items():
            if col_name in dataset['column_stats']:
                v2_stats = dataset['column_stats'][col_name]
                break

        if v1_stats and v2_stats:
            # Show standard statistics
            stat_keys = [
                ('count', 'Count', ',.0f'),
                ('mean', 'Mean', '.4f'),
                ('std', 'Std Dev', '.4f'),
                ('p05', '5th %', '.4f'),
                ('p10', '10th %', '.4f'),
                ('p25', '25th %', '.4f'),
                ('p75', '75th %', '.4f'),
                ('p90', '90th %', '.4f'),
                ('p95', '95th %', '.4f')
            ]

            for stat_key, stat_label, fmt in stat_keys:
                if stat_key in v1_stats and stat_key in v2_stats:
                    v1_val = v1_stats[stat_key]
                    v2_val = v2_stats[stat_key]

                    if v1_val is not None and v2_val is not None:
                        if 'count' in stat_key:
                            diff = v2_val - v1_val
                            lines.append(f"| {stat_label:<12} | {v1_val:>15,.0f} | {v2_val:>15,.0f} | {diff:>+15,.0f} |")
                        else:
                            diff = v2_val - v1_val
                            lines.append(f"| {stat_label:<12} | {v1_val:>15.4f} | {v2_val:>15.4f} | {diff:>+15.4f} |")

        lines.append("")

    lines.append("")
    
    # Structure changes
    if differences['structure_changes']:
        lines.append("## Structure Changes")
        for change in differences['structure_changes']:
            lines.append(f"- {change}")
        lines.append("")
    
    # Row count changes
    if differences['row_changes']:
        lines.append("## Row Count Changes")
        lines.append("")
        lines.append("| Dataset | Old Rows | New Rows | Difference | % Change |")
        lines.append("|---------|----------|----------|------------|----------|")
        for change in differences['row_changes']:
            lines.append(f"| {change['dataset']} | {change['old_rows']:,} | "
                        f"{change['new_rows']:,} | {change['difference']:+,} | "
                        f"{change['pct_change']:+.2f}% |")
        lines.append("")
    
    # Column changes
    if differences['new_columns'] or differences['removed_columns']:
        lines.append("## Column Changes")
        if differences['new_columns']:
            lines.append(f"**New columns** ({len(differences['new_columns'])}): "
                        f"{', '.join(differences['new_columns'][:5])}")
            if len(differences['new_columns']) > 5:
                lines.append(f"  ... and {len(differences['new_columns']) - 5} more")
        if differences['removed_columns']:
            lines.append(f"**Removed columns** ({len(differences['removed_columns'])}): "
                        f"{', '.join(differences['removed_columns'][:5])}")
            if len(differences['removed_columns']) > 5:
                lines.append(f"  ... and {len(differences['removed_columns']) - 5} more")
        lines.append("")
    
    # Statistical changes (show top 20 most significant)
    if differences['stat_changes']:
        lines.append("## Significant Statistical Changes")
        lines.append("(Showing top 20 by relative difference)")
        lines.append("")
        
        # Sort by relative difference
        sorted_changes = sorted(differences['stat_changes'], 
                              key=lambda x: x['rel_diff'], reverse=True)[:20]
        
        lines.append("| Dataset | Column | Statistic | Old Value | New Value | Rel Diff |")
        lines.append("|---------|--------|-----------|-----------|-----------|----------|")
        
        for change in sorted_changes:
            old_val = f"{change['old_value']:.4f}" if isinstance(change['old_value'], float) else str(change['old_value'])
            new_val = f"{change['new_value']:.4f}" if isinstance(change['new_value'], float) else str(change['new_value'])
            lines.append(f"| {change['dataset']} | {change['column']} | "
                        f"{change['statistic']} | {old_val} | {new_val} | "
                        f"{change['rel_diff']:.2%} |")
        
        if len(differences['stat_changes']) > 20:
            lines.append("")
            lines.append(f"*Note: {len(differences['stat_changes']) - 20} additional "
                        f"statistical changes not shown*")
        lines.append("")
    
    # Statistics on differences
    lines.append("## Difference Statistics")

    # Statistical changes
    if differences['stat_changes']:
        # Calculate statistics on relative differences
        rel_diffs = [change['rel_diff'] for change in differences['stat_changes']]
        rel_diffs.sort(reverse=True)

        lines.append(f"**Statistical changes summary:**")
        lines.append(f"- Total changes: {len(rel_diffs)}")
        lines.append(f"- Max relative difference: {max(rel_diffs):.2%}")
        lines.append(f"- Median relative difference: {rel_diffs[len(rel_diffs)//2]:.2%}")
        lines.append(f"- Min relative difference: {min(rel_diffs):.2%}")

        # Count changes by magnitude
        large_changes = sum(1 for x in rel_diffs if x > 0.1)
        medium_changes = sum(1 for x in rel_diffs if 0.01 < x <= 0.1)
        small_changes = sum(1 for x in rel_diffs if x <= 0.01)

        lines.append(f"- Large changes (>10%): {large_changes}")
        lines.append(f"- Medium changes (1-10%): {medium_changes}")
        lines.append(f"- Small changes (≤1%): {small_changes}")
    else:
        lines.append(f"**Statistical changes summary:**")
        lines.append(f"- Total changes: 0")
        lines.append(f"- No statistical differences detected")
    lines.append("")

    # Row changes
    if differences['row_changes']:
        lines.append("## Row Change Statistics")

        # Calculate statistics on row changes
        row_pct_changes = [abs(change['pct_change']) for change in differences['row_changes']]
        total_old_rows = sum(change['old_rows'] for change in differences['row_changes'])
        total_new_rows = sum(change['new_rows'] for change in differences['row_changes'])

        lines.append(f"**Row count changes summary:**")
        lines.append(f"- Datasets affected: {len(differences['row_changes'])}")
        lines.append(f"- Total old rows: {total_old_rows:,}")
        lines.append(f"- Total new rows: {total_new_rows:,}")
        lines.append(f"- Net change: {total_new_rows - total_old_rows:+,}")
        lines.append(f"- Overall % change: {((total_new_rows - total_old_rows) / total_old_rows * 100):+.2f}%")

        if row_pct_changes:
            lines.append(f"- Max % change: {max(row_pct_changes):.2f}%")
            lines.append(f"- Median % change: {sorted(row_pct_changes)[len(row_pct_changes)//2]:.2f}%")
        lines.append("")
    else:
        lines.append("**Row count changes summary:**")
        lines.append(f"- Datasets affected: 0")
        lines.append(f"- No row count differences detected")
        lines.append("")

    # Summary
    lines.append("## Summary")
    total_issues = (len(differences['structure_changes']) +
                   len(differences['row_changes']) +
                   len(differences['new_columns']) +
                   len(differences['removed_columns']) +
                   len(differences['stat_changes']))

    if total_issues == 0:
        lines.append("✅ No significant differences found between vintages")
    else:
        lines.append(f"⚠️ Found {total_issues} differences:")
        lines.append(f"- {len(differences['structure_changes'])} structure changes")
        lines.append(f"- {len(differences['row_changes'])} datasets with row count changes")
        lines.append(f"- {len(differences['new_columns'])} new columns")
        lines.append(f"- {len(differences['removed_columns'])} removed columns")
        lines.append(f"- {len(differences['stat_changes'])} statistical changes")
    
    return "\n".join(lines)


def main():
    """Main execution function."""
    parser = argparse.ArgumentParser(
        description='Compare summary statistics between data vintages',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog='''
Examples:
  python3 utils/compare_sum.py unlabelled v1.0_baseline --type dl --script B_CompustatAnnual
  python3 utils/compare_sum.py v1.0_baseline after_fix --type pred --script Beta
        ''')
    
    parser.add_argument('vintage1', 
                        help='First vintage label (e.g., unlabelled, v1.0_baseline)')
    parser.add_argument('vintage2',
                        help='Second vintage label to compare against')
    parser.add_argument('--type', required=True, choices=['dl', 'pred'],
                        help='Type of data: dl (DataDownloads) or pred (Predictors)')
    parser.add_argument('--script', required=True,
                        help='Script name (e.g., B_CompustatAnnual)')
    parser.add_argument('--tolerance', type=float, default=0.01,
                        help='Tolerance for numeric comparisons (default: 0.01 = 1%%)')
    parser.add_argument('--output', 
                        help='Output file for comparison report (optional)')
    
    args = parser.parse_args()
    
    # Load vintage data
    print(f"Loading vintage 1: {args.vintage1}")
    vintage1_data = load_vintage(args.vintage1, args.type, args.script)
    
    print(f"Loading vintage 2: {args.vintage2}")
    vintage2_data = load_vintage(args.vintage2, args.type, args.script)
    
    # Compare vintages
    print("Comparing vintages...")
    differences = compare_datasets(vintage1_data, vintage2_data, args.tolerance)
    
    # Generate report
    report = format_comparison_report(vintage1_data, vintage2_data, differences, args.vintage1, args.vintage2)
    
    # Output report
    if args.output:
        output_path = Path(args.output)
        with open(output_path, 'w') as f:
            f.write(report)
        print(f"Report saved to: {output_path}")
    else:
        print("\n" + report)


if __name__ == "__main__":
    main()