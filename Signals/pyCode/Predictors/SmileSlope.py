# ABOUTME: SmileSlope.py - Generates SmileSlope predictor (Average Jump Size)\n# ABOUTME: Measures implied volatility smile slope from options data (Yan 2011 JFE)\n\n"""\nUsage:\n    python3 Predictors/SmileSlope.py\n\nInputs:\n    - pyData/Intermediate/OptionMetricsVolSurf.parquet\n    - pyData/Intermediate/SignalMasterTable.parquet\n\nOutputs:\n    - pyData/Predictors/SmileSlope.csv - Put IV minus Call IV for 30-day 50-delta options\n"""\n\n# --------------\n# Yan 2011 JFE\n\nimport pandas as pd\nimport numpy as np\nimport sys\nimport os\nsys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\nfrom utils.save_standardized import save_predictor\n\nprint("Starting SmileSlope.py...")\n\n# Data Prep\n# use OptionMetricsVolSurf, clear\ndf = pd.read_parquet('../pyData/Intermediate/OptionMetricsVolSurf.parquet')\n\n# bottom right page 221\n# keep if days == 30 & abs(delta) == 50\ndf = df[(df['days'] == 30) & (np.abs(df['delta']) == 50)]\n\n# make signal\n# keep secid time_avail_m cp_flag impl_vol\ndf = df[['secid', 'time_avail_m', 'cp_flag', 'impl_vol']]\n\n# reshape wide impl_vol, i(secid time_avail_m) j(cp_flag) string\ndf_pivot = df.pivot_table(index=['secid', 'time_avail_m'], \n                          columns='cp_flag', \n                          values='impl_vol',\n                          aggfunc='first').reset_index()\n\n# gen SmileSlope = impl_volP - impl_volC\ndf_pivot['SmileSlope'] = df_pivot['P'] - df_pivot['C']\n\n# save temp, replace\ntemp = df_pivot[['secid', 'time_avail_m', 'SmileSlope']]\n\n# Merge onto master table\n# use permno time_avail_m secid using SignalMasterTable, clear\nmaster = pd.read_parquet('../pyData/Intermediate/SignalMasterTable.parquet',\n                         columns=['permno', 'time_avail_m', 'secid'])\n\n# merge m:1 secid time_avail_m using temp, keep(master match) nogenerate\ndf_final = master.merge(temp, on=['secid', 'time_avail_m'], how='left')\n\n# keep if SmileSlope != .\ndf_final = df_final[df_final['SmileSlope'].notna()]\n\n# label var SmileSlope "Average Jump Size"\n\n# SAVE\n# do "$pathCode/savepredictor" SmileSlope\nprint(f"Calculated SmileSlope for {df[\"SmileSlope\"].notna().sum()} observations")

save_predictor(df_final[['permno', 'time_avail_m', 'SmileSlope']], 'SmileSlope')
print("SmileSlope.py completed successfully")